//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beautify.FidelityPayGateService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FidelityPayGateService.ITransactionStatusCheck")]
    public interface ITransactionStatusCheck {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/GetTransactionDetails", ReplyAction="http://tempuri.org/ITransactionStatusCheck/GetTransactionDetailsResponse")]
        string GetTransactionDetails(string orderID, string merchantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/GetTransactionDetails", ReplyAction="http://tempuri.org/ITransactionStatusCheck/GetTransactionDetailsResponse")]
        System.Threading.Tasks.Task<string> GetTransactionDetailsAsync(string orderID, string merchantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/GetTransactionStatus", ReplyAction="http://tempuri.org/ITransactionStatusCheck/GetTransactionStatusResponse")]
        string GetTransactionStatus(string orderID, string merchantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/GetTransactionStatus", ReplyAction="http://tempuri.org/ITransactionStatusCheck/GetTransactionStatusResponse")]
        System.Threading.Tasks.Task<string> GetTransactionStatusAsync(string orderID, string merchantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/GetTransactionStatusWithCode", ReplyAction="http://tempuri.org/ITransactionStatusCheck/GetTransactionStatusWithCodeResponse")]
        string GetTransactionStatusWithCode(string orderID, string merchantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/GetTransactionStatusWithCode", ReplyAction="http://tempuri.org/ITransactionStatusCheck/GetTransactionStatusWithCodeResponse")]
        System.Threading.Tasks.Task<string> GetTransactionStatusWithCodeAsync(string orderID, string merchantID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/DoWebServiceConfirmationStatus", ReplyAction="http://tempuri.org/ITransactionStatusCheck/DoWebServiceConfirmationStatusResponse" +
            "")]
        string DoWebServiceConfirmationStatus(string transactionRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/DoWebServiceConfirmationStatus", ReplyAction="http://tempuri.org/ITransactionStatusCheck/DoWebServiceConfirmationStatusResponse" +
            "")]
        System.Threading.Tasks.Task<string> DoWebServiceConfirmationStatusAsync(string transactionRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/GetStatusSecure", ReplyAction="http://tempuri.org/ITransactionStatusCheck/GetStatusSecureResponse")]
        string GetStatusSecure(string orderID, string merchantID, string currencyCode, string amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionStatusCheck/GetStatusSecure", ReplyAction="http://tempuri.org/ITransactionStatusCheck/GetStatusSecureResponse")]
        System.Threading.Tasks.Task<string> GetStatusSecureAsync(string orderID, string merchantID, string currencyCode, string amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransactionStatusCheckChannel : Beautify.FidelityPayGateService.ITransactionStatusCheck, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactionStatusCheckClient : System.ServiceModel.ClientBase<Beautify.FidelityPayGateService.ITransactionStatusCheck>, Beautify.FidelityPayGateService.ITransactionStatusCheck {
        
        public TransactionStatusCheckClient() {
        }
        
        public TransactionStatusCheckClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransactionStatusCheckClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionStatusCheckClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionStatusCheckClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetTransactionDetails(string orderID, string merchantID) {
            return base.Channel.GetTransactionDetails(orderID, merchantID);
        }
        
        public System.Threading.Tasks.Task<string> GetTransactionDetailsAsync(string orderID, string merchantID) {
            return base.Channel.GetTransactionDetailsAsync(orderID, merchantID);
        }
        
        public string GetTransactionStatus(string orderID, string merchantID) {
            return base.Channel.GetTransactionStatus(orderID, merchantID);
        }
        
        public System.Threading.Tasks.Task<string> GetTransactionStatusAsync(string orderID, string merchantID) {
            return base.Channel.GetTransactionStatusAsync(orderID, merchantID);
        }
        
        public string GetTransactionStatusWithCode(string orderID, string merchantID) {
            return base.Channel.GetTransactionStatusWithCode(orderID, merchantID);
        }
        
        public System.Threading.Tasks.Task<string> GetTransactionStatusWithCodeAsync(string orderID, string merchantID) {
            return base.Channel.GetTransactionStatusWithCodeAsync(orderID, merchantID);
        }
        
        public string DoWebServiceConfirmationStatus(string transactionRef) {
            return base.Channel.DoWebServiceConfirmationStatus(transactionRef);
        }
        
        public System.Threading.Tasks.Task<string> DoWebServiceConfirmationStatusAsync(string transactionRef) {
            return base.Channel.DoWebServiceConfirmationStatusAsync(transactionRef);
        }
        
        public string GetStatusSecure(string orderID, string merchantID, string currencyCode, string amount) {
            return base.Channel.GetStatusSecure(orderID, merchantID, currencyCode, amount);
        }
        
        public System.Threading.Tasks.Task<string> GetStatusSecureAsync(string orderID, string merchantID, string currencyCode, string amount) {
            return base.Channel.GetStatusSecureAsync(orderID, merchantID, currencyCode, amount);
        }
    }
}
